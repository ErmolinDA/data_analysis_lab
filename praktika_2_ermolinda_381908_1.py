# -*- coding: utf-8 -*-
"""Praktika_2_ErmolinDA_381908-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_gGzJ2a5SQP8MGLAs_9hYjOHzcpjYKh0

Подключение библиотек и таблицы
"""

import xlrd
import numpy
import matplotlib.pyplot as plt
import seaborn as sns

book = xlrd.open_workbook('/content/drive/MyDrive/Terver/02_Автоаварии.xls')

sheet = book.sheet_by_index(0)
row = sheet.row(1)

"""Парсинг данных"""

severity_types = []
visibility = []
visability_on_severity = {}

for i in range(sheet.nrows-1):
  if (sheet.cell_value(i+1, 18) != '')&(sheet.cell_value(i+1, 3) != ''):
    severity_types.append(sheet.cell_value(i+1, 3))
    visibility.append(float(sheet.cell_value(i+1, 18)))
    if visability_on_severity.get(sheet.cell_value(i+1, 3)) == None:
      visability_on_severity[sheet.cell_value(i+1, 3)] = []
    visability_on_severity[sheet.cell_value(i+1, 3)].append(float(sheet.cell_value(i+1, 18)))

print(visability_on_severity)

"""Задание 2. Построение графиков видимости"""

sns.distplot(visibility)
plt.title("Распределение видимости")
plt.xlim([0, 12])
plt.show()

for type in visability_on_severity:
  sns.distplot(visability_on_severity[type], label = type)
plt.xlim([0, 12])
plt.legend()
plt.title("Распределение видимости по типам аварий")
plt.show()

for type in visability_on_severity:
  sns.kdeplot(visability_on_severity[type], label = type, cumulative=True)
plt.xlim([0, 12])
plt.legend()
plt.title("Функции распределения случайных величин")
plt.show()

"""Задание 3. Построените рядов"""

temp = []
for i in range(sheet.nrows-1):
  if (sheet.cell_value(i+1, 14) != ''):
    temp.append(float(sheet.cell_value(i+1, 14)))


plt.title("Группированный статистический ряд")
plt.hist(temp)
plt.show()

from collections import Counter
temp_count = Counter(temp)

plt.title("Вариационный вариант")
plt.bar(temp_count.keys(), temp_count.values())
plt.show()

"""Задание 4. Самые аварийные города"""

city = []
five_city = {}
for i in range(sheet.nrows-1):
  city.append(sheet.cell_value(i+1, 10))
city_count = Counter(city)
five_city = [key for key, i in city_count.most_common(5)]

tmp = {}
for i in five_city:
  tmp[i] = []

for i in range(sheet.nrows-1):
  if tmp.get(sheet.cell_value(i+1, 10)) != None:
    tmp[sheet.cell_value(i+1, 10)].append(float(sheet.cell_value(i+1, 6)))
print(tmp)

for type in tmp:
  sns.distplot(tmp[type], label = type)
plt.legend()
plt.xlim([-0.3, 0.3])
plt.title("Распределение протяженности дороги при аварии")
plt.show()

for type in tmp:
  sns.kdeplot(tmp[type], label = type, cumulative=True,warn_singular=False)
plt.legend()
plt.xlim([-0.3, 0.3])
plt.title("Функции распределения вероятности")
plt.show()